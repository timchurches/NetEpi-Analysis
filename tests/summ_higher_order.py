#
#   The contents of this file are subject to the HACOS License Version 1.2
#   (the "License"); you may not use this file except in compliance with
#   the License.  Software distributed under the License is distributed
#   on an "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
#   implied. See the LICENSE file for the specific language governing
#   rights and limitations under the License.  The Original Software
#   is "NetEpi Analysis". The Initial Developer of the Original
#   Software is the Health Administration Corporation, incorporated in
#   the State of New South Wales, Australia.
#
#   Copyright (C) 2004,2005 Health Administration Corporation. 
#   All Rights Reserved.
#
# $Id: summ_higher_order.py 2626 2007-03-09 04:35:54Z andrewm $
# $Source: /usr/local/cvsroot/NSWDoH/SOOMv0/tests/summ_higher_order.py,v $

from SOOMv0 import *
import unittest

def _get_ds():
    cola_data=['c','c','c','a','b','b','a','c','c','c','a','b','c','a','c','c','c','c','c','b','b','c','b','a','a','b','b','a','c','a',
    'b','c','b','b','c','c','b','a','a','a','b','c','b','a','b','b','a','c','c','a','c','a','b','a','c','c','b','c','c','b','a','b','c',
    'c','a','c','a','a','b','b','a','c','c','a','a','b','b','c','c','c','c','a','c','a','a','a','c','a','c','a','a','a','c','a','b','b',
    'a','c','b','c','b','c','a','a','b','a','b','c','a','b','a','a','b','b','c','b','c','c','c','c','a','b','c','c','b','a','a','c','a',
    'c','c','c','c','a','a','a','b','b','c','c','b','a','b','c','c','b','a','a','a','b','b','b','a','c','b','c','a','c','c','c','a','b',
    'c','c','a','c','c','c','c','c','c','c','b','c','b','c','a','a','a','a','b','a','b','b','c','b','c','c','b','a','b','c','b','a','a',
    'a','a','c','c','a']
    colb_data=['a','b','a','c','c','a','a','c','a','b','a','c','c','a','c','c','c','c','b','b','c','b','b','b','b','a','b','c','b','b',
    'b','a','b','c','a','a','a','c','b','c','a','b','c','c','c','c','c','c','c','b','a','c','a','a','c','b','c','a','a','a','c','a','a',
    'c','c','b','b','c','a','c','b','a','c','c','a','c','b','b','a','b','b','c','a','c','c','b','a','b','c','b','c','c','a','c','c','c',
    'c','a','b','a','c','c','a','a','a','b','b','a','c','c','b','a','b','c','a','c','b','b','b','c','b','a','c','c','b','c','a','b','a',
    'a','a','c','a','c','a','a','a','b','a','b','b','b','c','c','a','b','b','c','b','c','c','a','a','b','c','a','a','a','a','c','a','c',
    'c','c','b','a','b','c','c','b','a','b','a','b','c','c','c','a','a','b','b','c','c','c','c','b','a','c','b','c','a','a','b','c','a',
    'b','a','a','c','a']
    colc_data=['a','a','c','b','a','b','b','c','b','c','c','c','a','c','a','c','a','b','a','a','b','a','c','c','a','c','b','a','b','b',
    'b','a','c','c','b','c','b','c','c','a','b','c','a','a','c','b','c','b','b','c','a','a','c','b','b','c','b','c','b','b','b','c','b',
    'b','b','c','c','a','a','a','a','b','b','b','a','b','a','b','a','c','a','b','c','c','a','a','c','b','b','a','a','a','c','c','c','c',
    'a','a','c','c','b','b','c','a','b','c','b','c','c','a','b','b','a','b','a','c','a','a','b','c','b','a','b','c','b','c','b','a','c',
    'b','a','a','c','a','a','c','b','b','a','a','c','b','c','b','b','b','a','b','a','c','b','c','b','b','c','a','b','b','b','b','b','a',
    'b','a','b','a','c','a','b','c','c','b','c','b','c','b','a','b','c','c','a','c','c','a','b','a','a','a','c','b','c','a','c','b','a',
    'b','c','b','b','c']
    cold_data=['c','a','b','c','b','a','c','c','c','c','c','b','b','a','b','a','b','c','b','a','c','a','a','b','b','c','b','b','b','a',
    'c','c','c','a','c','b','a','c','b','b','a','c','c','b','a','c','b','c','b','b','c','b','b','c','a','b','b','c','c','c','c','c','c',
    'b','a','a','c','a','b','b','c','a','c','b','b','c','a','b','b','c','c','a','a','a','c','a','a','b','b','a','a','b','c','a','b','c',
    'b','c','c','b','b','b','b','b','b','a','c','b','a','a','b','b','c','b','b','b','b','b','c','a','c','b','c','b','b','a','b','a','c',
    'a','b','b','c','c','b','b','a','b','a','a','c','b','c','a','c','b','b','c','c','a','c','b','c','b','c','b','a','c','c','b','a','a',
    'a','a','c','c','b','b','b','b','a','b','c','c','a','a','a','a','c','b','b','a','b','b','a','b','a','c','b','b','b','c','c','c','a',
    'b','a','b','b','a']
    cole_data=[0.3571170775020100,0.7761841811128800,0.5312500551954100,0.7021558627961900,0.6575277478702000,0.5282215660103600,
    0.4827106695076000,0.0941159148207400,0.7926955035853600,0.0969011011053300,0.2589461045614100,0.0754211275258200,0.3515378927586300,
    0.2391162716034400,0.8484617233502000,0.2886365928168500,0.8726803776215200,0.9333756696122500,0.7385261527907600,0.2568027839329100,
    0.6309593360083900,0.4043286244405100,0.3900779971806600,0.3176672413561800,0.5117277393637800,0.6056445071500000,0.4005583056251300,
    0.4108953747949000,0.9142303824956600,0.6488470810692900,0.5778574815848100,0.0083997203076257,0.7854928871549100,0.7203341115826400,
    0.4442541131024500,0.8191027561291600,0.9306504092787600,0.5744151415184200,0.1756906007303300,0.5825717545033300,0.3044757914284500,
    0.7436330764291900,0.8762406203319500,0.9753779065680500,0.8142601027219800,0.7156344501840100,0.1328585614137600,0.8701852205536200,
    0.3867031793979400,0.6085042164700500,0.1060311734238700,0.0560597325936238,0.2751670974656700,0.5376034726098100,0.1633436969310700,
    0.7105775245980200,0.8224636012792800,0.5036567745281600,0.7212445092020700,0.6967697305124100,0.2162879888044100,0.5146122800719900,
    0.0257929023475353,0.4412799968576400,0.2694013594972900,0.1086779018438700,0.4722444617525800,0.6883156228290400,0.7134534626796100,
    0.8128526773363500,0.5603648477980700,0.8197487182075800,0.6852849874111200,0.0947032622502600,0.7302073937515700,0.9391698352709200,
    0.6110993859409800,0.1954966574886300,0.4773301693970900,0.0624214066483180,0.9930433849771700,0.3388694158470500,0.5998717279172800,
    0.5288271343004000,0.2736410071484900,0.4660192087600000,0.4013773917226900,0.0678981151747900,0.5408607626058400,0.9314801548288500,
    0.9592310557883300,0.7224279272940100,0.0443864157630068,0.5673041355643900,0.6706950290457700,0.8633093986955000,0.2843092732524000,
    0.7915918556002800,0.8056836886357900,0.5476102016622200,0.3147646092412800,0.6972641277579800,0.6712932245206500,0.0859611123269200,
    0.2142461488089700,0.7444272505791900,0.1335863262105600,0.5768507391106500,0.2414977560944300,0.1012862436945000,0.3856627360850800,
    0.3012459978001400,0.8644447768407100,0.1341387895560500,0.0402606548928938,0.3713916844555100,0.7549977678596000,0.5735631238546000,
    0.2245133962596300,0.8326630880276900,0.1983434442423000,0.7670700684036400,0.7767444787438700,0.1167921992562600,0.4297029853005400,
    0.6873500154760400,0.9997965442015700,0.2789010392869300,0.5395008155794300,0.3255139204326600,0.9606196684579400,0.0727675473656300,
    0.9884289121201300,0.5951148516475700,0.0480222492702409,0.4014916207648300,0.6481790387296000,0.5991297110911100,0.1195951048841600,
    0.8376663508069000,0.9869529795772100,0.2947044290111800,0.9515349324566900,0.1491484279507500,0.2987826407415700,0.2679868532661200,
    0.1220279699759600,0.1839851612150600,0.4334474887854600,0.8688170844078100,0.0692642056705700,0.8229022756325500,0.3538812824310100,
    0.8505122772653100,0.1458675321870700,0.9539552028076500,0.4509884950010900,0.6192829784095600,0.3153717817344500,0.6486643611680000,
    0.7771429791008700,0.5022215496293300,0.6774720599304200,0.8373987105849100,0.9223509467776600,0.1408785675377000,0.8263698037836500,
    0.3677158394678100,0.7338101885904600,0.5453924134119300,0.9750851713936200,0.4240025828704200,0.6555361038332500,0.0099530573980664,
    0.2133658422219400,0.1942526098313900,0.2494984191141500,0.2456394770395100,0.3090840961360700,0.4396128251401700,0.2391627208512100,
    0.2948221393371100,0.8492826022437200,0.6634358785410500,0.4008184133101300,0.4450878186361300,0.9385009617258300,0.4723023080603600,
    0.1978112199333500,0.0051124254265392,0.6313251567219000,0.8746297265750400,0.9285209001640400,0.8961469954327400,0.2281481024008900,
    0.0463868235453902,0.8852949775221200,0.1832539025616100,0.2388267806911900,0.4134999259437900]
    colf_data=[0.2211140195006100,0.4360741406847100,0.8613446042227300,0.3287501173693400,0.3726444083138500,0.5584100981049200,
    0.1459010635250700,0.6773561475227300,0.3194984334146100,0.0721468879245900,0.8571478104484900,0.6273517909587100,0.1998612257651300,
    0.0229027066486435,0.1169962129169100,0.3450669489545100,0.7447339197363300,0.2099804762797300,0.4145630017922000,0.1287495378073000,
    0.4100549069280000,0.9491590778106600,0.4594824097396200,0.7963610574586100,0.0886591603460900,0.7485923505148800,0.8800058294460200,
    0.0742016998465100,0.7864648824494600,0.9806749285108700,0.4340192626388800,0.2946438674324300,0.5858129312218200,0.1684787795732100,
    0.5006322164557000,0.1411859226139100,0.6483001386040300,0.8667062259589800,0.8874083281901700,0.9374856529466200,0.8792743053656400,
    0.3914916330908800,0.7249504866660300,0.6859824143750500,0.3820324355652700,0.4205282663090700,0.5164968615940200,0.1421931712618900,
    0.0196812832819676,0.9981697062021900,0.1755885231194900,0.2947326103666400,0.6474645760131300,0.2692372092368200,0.1501168111106900,
    0.8747214311150400,0.5941169679137400,0.8134219678181300,0.8300854032067900,0.5348064496809600,0.6361397489142300,0.4672722781390200,
    0.4085832379798300,0.3521629848294700,0.9214896629198800,0.5397186472731200,0.5769544260469000,0.3518576432726600,0.2548196559095800,
    0.2568630926575800,0.6790804218869100,0.9233051151611400,0.5564388272149600,0.4809615563046900,0.2671961096428300,0.5309178873574900,
    0.9366439906585200,0.7178008867044900,0.4742393938238900,0.2739507305780100,0.0325503824430287,0.3058399694533200,0.2035991578379600,
    0.7624100748274500,0.3256649041202200,0.6021165203312900,0.2312960425537500,0.3223130597371200,0.1910035122144000,0.9777761488118000,
    0.4510701496391800,0.3411166976863100,0.0590524105630128,0.1893069600636600,0.3624322551127600,0.5505328232192100,0.2980210265601100,
    0.8214905093524000,0.5951572915516500,0.0164013002144179,0.4369477822617300,0.1448122440580300,0.0540642389348076,0.7410481887595000,
    0.4306576612548200,0.6152215048741600,0.6732566979123500,0.2016790216796400,0.4125241885951300,0.6613378965581400,0.6762378791702100,
    0.6273308562242100,0.3980484234160000,0.3758690256513000,0.9505785540447400,0.5432862451035900,0.3546959964347500,0.9624781957652700,
    0.1521718400307800,0.4872834875654800,0.0711031100112400,0.5547880174381600,0.9489611549996500,0.6918532027359300,0.9653979674751800,
    0.1580477748802100,0.5239184789936600,0.6256258937649500,0.6644906581679700,0.8498434479580400,0.0884186807500200,0.7239693048056000,
    0.5220856892513500,0.4746197459635400,0.0132281947942582,0.4744862464603400,0.8283824826722800,0.0824273471173000,0.2823508127044600,
    0.9465440269310600,0.0735692624345200,0.7231765024937500,0.7558123528751600,0.1957031610401800,0.1186832571954800,0.2554836055522200,
    0.2569638924938400,0.2698718464327300,0.0796054196914600,0.8639274262189500,0.0600095764081970,0.8431675736062000,0.1715707034671500,
    0.5270473810504400,0.9663848676562200,0.0477994550242086,0.5613348076871200,0.3687937689799700,0.8370007960298100,0.8878275844677400,
    0.9222255008864300,0.6077968169040000,0.7749797104741300,0.1546510803302000,0.1648641033865800,0.7828307150783100,0.2208448561005500,
    0.8652610689705500,0.1270430177110400,0.4437622211145900,0.0762391863745800,0.7827070801438300,0.2073762911406200,0.1463289685297400,
    0.0503129400547189,0.8952161883447300,0.5186702029400800,0.9281161268838200,0.3755391353627300,0.9205843191224000,0.8542798887259700,
    0.7465386962269100,0.5741802410102300,0.0629949341821400,0.7173693341749500,0.7518019935823000,0.2204383091164900,0.3672280033897700,
    0.3966629590823600,0.3096910791051000,0.8951317094709400,0.1297102375560000,0.9097227886830000,0.4116849542649800,0.3119660850204300,
    0.2198845791723000,0.4694267620655800,0.3389506350918400,0.0473834290389826,0.4535701896313400]
    ds = Dataset('randomdata')
    ds.addcolumnfromseq('cola', label='Column A',
                        coltype='ordinal', datatype='str',
                        all_value='.',
                        data=cola_data
                        )
    ds.addcolumnfromseq('colb', label='Column B',
                        coltype='ordinal', datatype='str',
                        all_value='.',
                        data=colb_data
                        )
    ds.addcolumnfromseq('colc', label='Column C',
                        coltype='ordinal', datatype='str',
                        all_value='.',
                        data=colc_data
                        )
    ds.addcolumnfromseq('cold', label='Column D',
                        coltype='ordinal', datatype='str',
                        all_value='.',
                        data=cold_data
                        )
    ds.addcolumnfromseq('cole', label='Column E',
                        coltype='scalar', datatype='float',
                        data=cole_data
                        )
    ds.addcolumnfromseq('colf', label='Column F',
                        coltype='scalar', datatype='float',
                        data=colf_data
                        )
    return ds

class summ_test(unittest.TestCase):

    def assertListNear(self, first, second, prec=2):
        first = [round(v, prec) for v in first]
        second = [round(v, prec) for v in second]
        first_str = ', '.join(['%.*f' % (prec, v) for v in first])
        second_str = ', '.join(['%.*f' % (prec, v) for v in second])
        self.assertEqual(first, second, 
                         '[%s]:%d != [%s]:%d' % (first_str, len(first), second_str, len(second)))

    def assertOrdinal(self, a, b):
        a=list(a)
        b=list(b)
        self.assertEqual(a, b)

    def test_props(self):
        ds = _get_ds()
        ds_summ = ds.summ('cola','colb','colc',proportions=True)
        freq = ds_summ['_freq_'][37:]
        all_cola_colb_colc = ds_summ['_prop_of_all-cola-colb-colc'][37:]
        all_colb_colc = ds_summ['_prop_of_all-colb-colc'][37:]
        all_cola_colc = ds_summ['_prop_of_all-cola-colc'][37:]
        all_cola_colb = ds_summ['_prop_of_all-cola-colb'][37:]
        all_colc = ds_summ['_prop_of_all-colc'][37:]     
        all_colb = ds_summ['_prop_of_all-colb'][37:]     
        all_cola = ds_summ['_prop_of_all-cola'][37:]     
        sas_freq = [ 4, 8, 8, 6, 7, 6,11, 8, 7, 2, 6, 6, 5, 6, 6, 6, 7,11,12,10,10, 8, 6, 7, 7, 16, 4]
        sas_all_cola_colb_colc = [0.020,0.040,0.040,0.030,0.035,0.030,0.055,0.040,0.035,0.010,0.030,0.030,0.025,0.030,0.030,0.030,0.035,
                                  0.055,0.060,0.050,0.050,0.040,0.030,0.035,0.035,0.080,0.020]
        sas_all_colb_colc = [0.06154,0.12308,0.12308,0.09231,0.10769,0.09231,0.16923,0.12308,0.10769,0.03636,0.10909,0.10909,
        0.09091,0.10909,0.10909,0.10909,0.12727,0.20000,0.15000,0.12500,0.12500,0.10000,0.07500,0.08750,0.08750,0.20000,0.05000]
        sas_all_cola_colc = [0.06061,0.12121,0.12121,0.10526,0.12281,0.10526,0.14286,0.10390,0.09091,0.03030,0.09091,0.09091,0.08772,
        0.10526,0.10526,0.07792,0.09091,0.14286,0.18182,0.15152,0.15152,0.14035,0.10526,0.12281,0.09091,0.20779,0.05195]
        sas_all_cola_colb = [0.06557,0.10811,0.12308,0.09836,0.09459,0.09231,0.18033,0.10811,0.10769,0.03279,0.08108,0.09231,0.08197,
        0.08108,0.09231,0.09836,0.09459,0.16923,0.19672,0.13514,0.15385,0.13115,0.08108,0.10769,0.11475,0.21622,0.06154]
        sas_all_colc = [0.20000,0.40000,0.40000,0.31579,0.36842,0.31579,0.42308,0.30769,0.26923,0.14286,0.42857,0.42857,0.29412,
        0.35294,0.35294,0.25000,0.29167,0.45833,0.37500,0.31250,0.31250,0.38095,0.28571,0.33333,0.25926,0.59259,0.14815]
        sas_all_colb = [0.19048,0.34783,0.38095,0.28571,0.30435,0.28571,0.52381,0.34783,0.33333,0.15385,0.31579,0.26087,0.38462,
        0.31579,0.26087,0.46154,0.36842,0.47826,0.44444,0.31250,0.47619,0.29630,0.18750,0.33333,0.25926,0.50000,0.19048]
        sas_all_cola = [0.22222,0.33333,0.33333,0.31579,0.36842,0.31579,0.45833,0.25806,0.31818,0.11111,0.25000,0.25000,0.26316,
        0.31579,0.31579,0.25000,0.22581,0.50000,0.66667,0.41667,0.41667,0.42105,0.31579,0.36842,0.29167,0.51613,0.18182]

        self.assertEqual(freq, sas_freq)
        self.assertListNear(all_cola_colb_colc,sas_all_cola_colb_colc,prec=5)
        self.assertListNear(all_colb_colc,sas_all_colb_colc,prec=5)
        self.assertListNear(all_cola_colc,sas_all_cola_colc,prec=5)
        self.assertListNear(all_cola_colb,sas_all_cola_colb,prec=5)
        self.assertListNear(all_colc,sas_all_colc,prec=5)
        self.assertListNear(all_colb,sas_all_colb,prec=5)
        self.assertListNear(all_cola,sas_all_cola,prec=5)

    def test_means(self):
        ds = _get_ds()
        ds_summ = ds.summ('cola','colb','colc',mean('cole'),allcalc=True)
        meane = ds_summ['mean_of_cole']
        sas_meane = [ 0.50458, 0.44366, 0.56386, 0.51332, 0.50864, 0.49714, 0.50660, 0.53073, 0.46595, 0.52402,
         0.44798, 0.43934, 0.44351, 0.59345, 0.52470, 0.57434,  0.50945, 0.52714, 0.50715, 0.47214, 0.40956, 0.45255, 
         0.57775, 0.49251, 0.61496, 0.55367, 0.49071, 0.49590, 0.46343, 0.50073, 0.55046, 0.56836,
         0.39956, 0.52351, 0.55141, 0.47971, 0.49562, 0.27308, 0.51863, 0.46478, 0.50418, 0.36631, 0.45969,
         0.52704, 0.33833, 0.43244, 0.74026, 0.55376, 0.58420, 0.48332, 0.40147, 0.68242, 0.60226, 0.51806,
         0.59493, 0.48074, 0.45459, 0.59876, 0.66965, 0.43645, 0.44200, 0.54612, 0.53363, 0.33305]
        self.assertListNear(meane,sas_meane,prec=5)

    def test_wgt_means(self):
        ds = _get_ds()
        ds_summ = ds.summ('cola','colb','colc',mean('cole'),weightcol='colf',allcalc=True)
        wgt_meane = ds_summ['mean_of_cole_wgtd_by_colf']
        sas_wgt_meane = [ 0.51011, 0.46426, 0.56850, 0.50277, 0.50307, 0.51894, 0.50849, 0.51706, 0.49314,
         0.52289, 0.45728, 0.48350, 0.45242, 0.59330, 0.51480, 0.59430, 0.47552, 0.55798, 0.48309, 0.54532, 0.42662, 0.43904,
         0.54814, 0.51334, 0.62257, 0.48056, 0.52840, 0.48942, 0.38417, 0.52220, 0.55449,
         0.57464, 0.44026, 0.53482, 0.54327, 0.50189, 0.48420, 0.24795, 0.52692, 0.45436, 0.62705, 0.41431,
         0.44871, 0.58258, 0.32366, 0.41221, 0.75019, 0.55875, 0.59515, 0.48492, 0.37255, 0.70013, 0.55947,
         0.61484, 0.60037, 0.35862, 0.49284, 0.61293, 0.60316, 0.53818, 0.50413, 0.47065, 0.55433, 0.29520] 
        self.assertListNear(wgt_meane,sas_wgt_meane,prec=5)

    def _get_nofilt_summds(self, *extras, **kwargs):
        kwargs['allcalc'] = True
        ds = _get_ds()
        ds_summ = ds.summ('cola','colb','cold', *extras, **kwargs)
        self.assertOrdinal(ds_summ['cola'], '.abc......aaabbbcccaaabbbccc.........aaaaaaaaabbbbbbbbbccccccccc')
        self.assertOrdinal(ds_summ['colb'], '....abc...abcabcabc.........aaabbbcccaaabbbcccaaabbbcccaaabbbccc')
        self.assertOrdinal(ds_summ['cold'], '.......abc.........abcabcabcabcabcabcabcabcabcabcabcabcabcabcabc')
        return ds_summ

    def test_unwgt_nofilt_mean(self):
        ds_summ = self._get_nofilt_summds(mean('cole'))
        unwgt_nofilt_mean_cole = ds_summ['mean_of_cole']
        sas_unwgt_nofilt_mean_cole = [0.50458,0.44366,0.56386,0.51332,0.50864,0.49714,0.50660,0.51620,0.47888,0.52696,0.44798,0.43934,0.44351,
        0.51694,0.36432,0.47279,0.59345,0.52470,0.57434,0.52998,0.49459,0.67090,0.50945,0.52714,0.50715,0.50646,0.56066,0.46411,0.54617,
        0.53420,0.46103,0.53788,0.44752,0.54443,0.48288,0.46730,0.59361,0.46283,0.46257,0.41362,0.69769,0.29699,0.51735,0.48251,0.36270,
        0.49168,0.60288,0.57069,0.61814,0.41933,0.36849,0.72608,0.53671,0.53720,0.64900,0.59710,0.56558,0.43953,0.48115,0.65337,0.35508,
        0.44297,0.48595,0.63867]
        # need to adjust order of results as calculated by SAS...
        s = sas_unwgt_nofilt_mean_cole
        sas_unwgt_nofilt_mean_cole = s[0:13] + s[16:19] + s[22:25] + s[13:16] + s[19:22] + s[25:]
        self.assertListNear(unwgt_nofilt_mean_cole,sas_unwgt_nofilt_mean_cole,prec=5)

    def _get_filt_summds(self, *extras, **kwargs):
        kwargs['allcalc'] = True
        kwargs['filterexpr'] = "colc ne 'c' and colf > 0.1"
        ds = _get_ds()
        ds_summ = ds.summ('cola','colb','cold', *extras, **kwargs)
        self.assertOrdinal(ds_summ['cola'], '.abc......aaabbbcccaaabbbccc.........aaaaaaaaabbbbbbbbbccccccccc')
        self.assertOrdinal(ds_summ['colb'], '....abc...abcabcabc.........aaabbbcccaaabbbcccaaabbbcccaaabbbccc')
        self.assertOrdinal(ds_summ['cold'], '.......abc.........abcabcabcabcabcabcabcabcabcabcabcabcabcabcabc')
        return ds_summ

    def test_unwgt_filt_mean(self):
        ds_summ = self._get_filt_summds(mean('cole'))
        unwgt_filt_mean_cole = ds_summ['mean_of_cole']
        sas_unwgt_filt_mean_cole = [0.49498,0.45467,0.53575,0.50219,0.47171,0.47439,0.52672,0.50175,0.46328,0.52891,0.47212,0.44457,
        0.44962,0.52113,0.35965,0.52039,0.60038,0.42263,0.59157,0.48537,0.47839,0.67933,0.42001,0.53714,0.55883,0.49449,0.53636,0.47342,
        0.52640,0.45128,0.44512,0.57904,0.42062,0.47044,0.42548,0.50170,0.65115,0.42548,0.52930,0.45807,0.68212,0.18334,0.74136,0.50106,
        0.38865,0.47789,0.60288,0.56492,0.69677,0.43395,0.35650,0.52530,0.30175,0.54835,0.79050,0.55084,0.23361,0.42277,0.57427,0.63590,
        0.11723,0.40374,0.55750,0.74758]
        # need to adjust order of results as calculated by SAS...
        s = sas_unwgt_filt_mean_cole
        sas_unwgt_filt_mean_cole = s[0:13] + s[16:19] + s[22:25] + s[13:16] + s[19:22] + s[25:]
        self.assertListNear(unwgt_filt_mean_cole,sas_unwgt_filt_mean_cole,prec=5)

    def test_wgt_nofilt_mean(self):
        ds_summ = self._get_nofilt_summds(mean('cole'),weightcol='colf')
        wgt_nofilt_mean_cole = ds_summ['mean_of_cole_wgtd_by_colf']
        sas_wgt_nofilt_mean_cole = [0.51011,0.46426,0.56850,0.50277,0.50307,0.51894,0.50849,0.53046,0.46285,0.55382,0.45728,0.48350,0.45242,0.53660,
        0.39202,0.47259,0.59330,0.51480,0.59430,0.56511,0.48186,0.67457,0.47552,0.55798,0.48309,0.49845,0.50888,0.49880,0.54893,
        0.47541,0.48861,0.58780,0.45281,0.59885,0.47339,0.46614,0.59850,0.51168,0.44388,0.39149,0.71972,0.34020,0.54318,0.43487,
        0.43394,0.49991,0.58433,0.58928,0.61409,0.51459,0.35895,0.69267,0.57281,0.51157,0.68635,0.56097,0.37039,0.48800,0.49992,
        0.62638,0.35855,0.45023,0.45355,0.57727]        
        # need to adjust order of results as calculated by SAS...
        s = sas_wgt_nofilt_mean_cole
        sas_wgt_nofilt_mean_cole = s[0:13] + s[16:19] + s[22:25] + s[13:16] + s[19:22] + s[25:]
        self.assertListNear(wgt_nofilt_mean_cole,sas_wgt_nofilt_mean_cole,prec=5)

    def test_wgt_filt_mean(self):
        ds_summ = self._get_filt_summds(mean('cole'), weightcol='colf')
        wgt_filt_mean_cole = ds_summ['mean_of_cole_wgtd_by_colf']
        sas_wgt_filt_mean_cole = [0.50331,0.48098,0.52792,0.50444,0.47379,0.51078,0.52242,0.52194,0.45893,0.54800,0.46007,
        0.51715,0.47039,0.54293,0.40475,0.50732,0.59180,0.42452,0.59276,0.51071,0.45889,0.66665,0.42522,0.57561,0.52822,0.50896,
        0.49810,0.50816,0.53654,0.38694,0.46685,0.62624,0.44756,0.47325,0.40233,0.50930,0.66051,0.46592,0.44992,0.47023,0.71378,
        0.24441,0.63108,0.45359,0.48090,0.47352,0.58433,0.56410,0.69677,0.56828,0.37085,0.45494,0.29330,0.55509,0.81168,0.55984,
        0.18526,0.44533,0.57132,0.60836,0.11933,0.40501,0.50971,0.72437]
        # need to adjust order of results as calculated by SAS...
        s = sas_wgt_filt_mean_cole
        sas_wgt_filt_mean_cole = s[0:13] + s[16:19] + s[22:25] + s[13:16] + s[19:22] + s[25:]
        self.assertListNear(wgt_filt_mean_cole,sas_wgt_filt_mean_cole,prec=5)

    def test_unwgt_nofilt_stderr(self):
        ds_summ = self._get_nofilt_summds(stderr('cole'))
        unwgt_nofilt_stderr_cole = ds_summ['stderr_of_cole']
        sas_unwgt_nofilt_stderr_cole = [0.02020,0.03275,0.03669,0.03406,0.03492,0.03768,0.03324,0.03666,0.03111,0.03806,0.05767,
        0.05978,0.05514,0.05439,0.05685,0.05202,0.05592,0.06595,0.06322,0.07350,0.05223,0.06473,0.05700,0.06955,0.05432,0.06798,
        0.04739,0.06513,0.06679,0.06486,0.05296,0.07472,0.04751,0.08253,0.05542,0.05163,0.06737,0.10143,0.13339,0.04980,0.09700,
        0.06077,0.11763,0.07707,0.11231,0.10276,0.13042,0.10656,0.03922,0.10332,0.05341,0.11031,0.13120,0.09163,0.12445,0.12432,
        0.10559,0.08192,0.14137,0.06976,0.16797,0.10474,0.07288,0.12727]
        # need to adjust order of results as calculated by SAS...
        s = sas_unwgt_nofilt_stderr_cole
        sas_unwgt_nofilt_stderr_cole = s[0:13] + s[16:19] + s[22:25] + s[13:16] + s[19:22] + s[25:]
        self.assertListNear(unwgt_nofilt_stderr_cole,sas_unwgt_nofilt_stderr_cole,prec=5)

    def test_unwgt_filt_stderr(self):
        ds_summ = self._get_filt_summds(stderr('cole'))
        unwgt_filt_stderr_cole = [v for v in ds_summ['stderr_of_cole']]
        unwgt_filt_stderr_cole[48] = 9999.99 # is supposed to be missing, use 9999.99 to represent this
        sas_unwgt_filt_stderr_cole = [0.02607,0.04803,0.04815,0.04015,0.04655,0.04894,0.04142,0.04716,0.04197,0.04716,0.08235,
        0.10281,0.07489,0.07834,0.08476,0.07621,0.08484,0.06868,0.08840,0.09212,0.06827,0.08991,0.07028,0.08269,0.05880,0.08129,
        0.06090,0.07185,0.08374,0.10545,0.06735,0.08106,0.06484,0.13497,0.07845,0.06468,0.06656,0.12767,0.20621,0.05445,0.13539,
        0.06678,0.18099,0.13933,0.14212,0.12049,0.13042,0.17602,9999.99,0.17715,0.04287,0.21261,0.20047,0.13841,0.07101,0.19565,
        0.12866,0.08569,0.13732,0.09648,0.10728,0.11965,0.07959,0.08064]
        # need to adjust order of results as calculated by SAS...
        s = sas_unwgt_filt_stderr_cole
        sas_unwgt_filt_stderr_cole = s[0:13] + s[16:19] + s[22:25] + s[13:16] + s[19:22] + s[25:]
        self.assertListNear(unwgt_filt_stderr_cole,sas_unwgt_filt_stderr_cole,prec=5)
    
    def test_wgt_nofilt_stderr(self):
        ds_summ = self._get_nofilt_summds(stderr('cole'),weightcol='colf')
        wgt_nofilt_stderr_cole = ds_summ['stderr_of_cole_wgtd_by_colf']
        sas_wgt_nofilt_stderr_cole = [0.01937,0.03210,0.03651,0.03182,0.03308,0.03378,0.03384,0.03534,0.03017,0.03545,0.05913,
        0.05569,0.05440,0.05551,0.05511,0.04763,0.05669,0.06222,0.06571,0.07145,0.05178,0.06450,0.05264,0.05954,0.05463,0.06203,
        0.04917,0.05853,0.06162,0.06361,0.05008,0.07188,0.04339,0.07182,0.05453,0.05480,0.06620,0.10208,0.13542,0.05630,0.09605,
        0.05596,0.07591,0.07481,0.12058,0.09567,0.13175,0.10332,0.03846,0.08945,0.04058,0.11625,0.13744,0.09822,0.11889,0.11329,
        0.09552,0.07623,0.13715,0.07260,0.15026,0.09479,0.08045,0.13000]
        # need to adjust order of results as calculated by SAS...
        s = sas_wgt_nofilt_stderr_cole
        sas_wgt_nofilt_stderr_cole = s[0:13] + s[16:19] + s[22:25] + s[13:16] + s[19:22] + s[25:]
        self.assertListNear(wgt_nofilt_stderr_cole,sas_wgt_nofilt_stderr_cole,prec=5)

    def test_wgt_filt_stderr(self):
        ds_summ = self._get_filt_summds(stderr('cole',weightcol='colf'))
        wgt_filt_stderr_cole = [v for v in ds_summ['stderr_of_cole_wgtd_by_colf']]
        wgt_filt_stderr_cole[48] = 9999.99 # is supposed to be missing, use 9999.99 to represent this
        sas_wgt_filt_stderr_cole = [0.02509,0.04724,0.04714,0.03830,0.04662,0.04397,0.04081,0.04475,0.04091,0.04511,
        0.09045,0.09084,0.07378,0.07934,0.08389,0.07411,0.08551,0.06196,0.09154,0.08979,0.06214,0.09908,0.06841,0.07346,0.05724,
        0.07265,0.06518,0.06598,0.07734,0.10902,0.06777,0.07537,0.05802,0.11836,0.07156,0.06518,0.06385,0.13645,0.21210,0.05514,
        0.13067,0.06559,0.14352,0.13709,0.14179,0.11976,0.13175,0.18098,9999.99,0.11548,0.04170,0.21781,0.20029,0.13807,0.06798,
        0.16915,0.13090,0.08252,0.13654,0.09936,0.10726,0.10117,0.08789,0.06618]
        # need to adjust order of results as calculated by SAS...
        s = sas_wgt_filt_stderr_cole
        sas_wgt_filt_stderr_cole = s[0:13] + s[16:19] + s[22:25] + s[13:16] + s[19:22] + s[25:]
        self.assertListNear(wgt_filt_stderr_cole,sas_wgt_filt_stderr_cole,prec=5)

if __name__ == '__main__':
    unittest.main()
